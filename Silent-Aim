-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

-- Variables
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local SilentAimEnabled = true
local FOV = 200 -- Field of view for target selection (in pixels)
local MaxDistance = 1000 -- Maximum distance to target
local TeamCheck = false -- Set to true to avoid targeting teammates
local HighlightEnabled = true -- Enable/disable target highlighting
local ESPEnabled = false -- ESP for all players

-- Visual Feedback (Highlight)
local CurrentTarget = nil
local CurrentHighlight = nil
local ESPHighlights = {} -- Store ESP highlights

-- Functions
local function IsVisible(part)
    local origin = Camera.CFrame.Position
    local direction = (part.Position - origin).Unit
    local ray = Ray.new(origin, direction * MaxDistance)
    local hit, position = Workspace:FindPartOnRayWithIgnoreList(ray, {LocalPlayer.Character, Camera})
    return hit and hit:IsDescendantOf(part.Parent)
end

local function GetClosestPlayerToCursor()
    local ClosestPlayer = nil
    local ShortestDistance = FOV
    
    for _, Player in pairs(Players:GetPlayers()) do
        if Player ~= LocalPlayer then
            -- Team check
            if not TeamCheck or Player.Team ~= LocalPlayer.Team then
                local Character = Player.Character
                if Character and Character:FindFirstChild("Humanoid") and Character.Humanoid.Health > 0 then
                    local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
                    local Head = Character:FindFirstChild("Head")
                    
                    if HumanoidRootPart and Head then
                        -- Check if in range
                        local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - HumanoidRootPart.Position).Magnitude
                        if Distance <= MaxDistance then
                            -- Check if on screen
                            local ScreenPosition, OnScreen = Camera:WorldToScreenPoint(Head.Position)
                            if OnScreen then
                                -- Check if within FOV
                                local ScreenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                                local ScreenDistance = (Vector2.new(ScreenPosition.X, ScreenPosition.Y) - ScreenCenter).Magnitude
                                
                                if ScreenDistance < ShortestDistance then
                                    ClosestPlayer = Player
                                    ShortestDistance = ScreenDistance
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    
    return ClosestPlayer
end

-- ESP Function
local function UpdateESP()
    -- Only proceed if ESP is enabled
    if not ESPEnabled then
        -- Clear all ESP highlights if ESP is disabled
        for player, highlight in pairs(ESPHighlights) do
            highlight:Destroy()
            ESPHighlights[player] = nil
        end
        return
    end
    
    -- Update ESP for all players
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            local shouldHighlight = true
            
            -- Apply team check if enabled
            if TeamCheck and player.Team == LocalPlayer.Team then
                shouldHighlight = false
            end
            
            -- Check if player is valid
            if player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
                -- If player should be highlighted
                if shouldHighlight then
                    -- Create highlight if it doesn't exist
                    if not ESPHighlights[player] then
                        local highlight = Instance.new("Highlight")
                        highlight.FillColor = Color3.fromRGB(255, 0, 0) -- Red for enemies
                        highlight.OutlineColor = highlight.FillColor
                        highlight.FillTransparency = 0.7
                        highlight.OutlineTransparency = 0.5
                        highlight.Parent = player.Character
                        ESPHighlights[player] = highlight
                    end
                else
                    -- Remove highlight if team check excludes this player
                    if ESPHighlights[player] then
                        ESPHighlights[player]:Destroy()
                        ESPHighlights[player] = nil
                    end
                end
            else
                -- Remove highlight if player is invalid
                if ESPHighlights[player] then
                    ESPHighlights[player]:Destroy()
                    ESPHighlights[player] = nil
                end
            end
        end
    end
    
    -- Clean up highlights for players who left or died
    for player, highlight in pairs(ESPHighlights) do
        if not player or not player.Character or not player.Character:FindFirstChild("Humanoid") or player.Character.Humanoid.Health <= 0 then
            highlight:Destroy()
            ESPHighlights[player] = nil
        end
    end
end

-- Camera hook for silent aim
local old_namecall
old_namecall = hookmetamethod(game, "__namecall", function(self, ...)
    local args = {...}
    local method = getnamecallmethod()
    
    if SilentAimEnabled and CurrentTarget and method == "Raycast" and checkcaller() == false then
        local targetPart = CurrentTarget.Character.Head
        
        -- Check if this is a shooting raycast
        if typeof(args[1]) == "Vector3" and typeof(args[2]) == "Vector3" then
            local origin = args[1]
            -- Modify the direction to point at the target
            local direction = (targetPart.Position - origin).Unit * MaxDistance
            args[2] = direction
            
            return old_namecall(self, unpack(args))
        end
    end
    
    return old_namecall(self, ...)
end)

-- Additional hook for games using FireServer for shooting
local old_fireserver
old_fireserver = hookfunction(Instance.new("RemoteEvent").FireServer, function(self, ...)
    local args = {...}
    
    if SilentAimEnabled and CurrentTarget and typeof(args[1]) == "Vector3" or typeof(args[1]) == "CFrame" then
        if typeof(args[1]) == "Vector3" then
            args[1] = (CurrentTarget.Character.Head.Position - Camera.CFrame.Position).Unit
        elseif typeof(args[1]) == "CFrame" then
            args[1] = CFrame.new(Camera.CFrame.Position, CurrentTarget.Character.Head.Position)
        end
    end
    
    return old_fireserver(self, unpack(args))
end)

-- Update target and highlight
RunService.RenderStepped:Connect(function()
    local Target = GetClosestPlayerToCursor()
    
    -- Update current target
    if Target then
        CurrentTarget = Target
    else
        CurrentTarget = nil
    end
    
    -- Remove previous highlight if target changed or highlights disabled
    if CurrentHighlight and (not CurrentTarget or CurrentHighlight.Parent ~= CurrentTarget.Character or not HighlightEnabled) then
        CurrentHighlight:Destroy()
        CurrentHighlight = nil
    end
    
    -- Create new highlight for current target if highlights enabled
    if SilentAimEnabled and HighlightEnabled and CurrentTarget and not CurrentHighlight then
        CurrentHighlight = Instance.new("Highlight")
        CurrentHighlight.FillColor = Color3.fromRGB(0, 255, 0) -- Green color
        CurrentHighlight.OutlineColor = Color3.fromRGB(0, 255, 0)
        CurrentHighlight.FillTransparency = 0.5
        CurrentHighlight.OutlineTransparency = 0
        CurrentHighlight.Parent = CurrentTarget.Character
    end
    
    -- Update ESP
    UpdateESP()
end)

-- Create mobile-friendly UI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "SilentAimUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

-- Main panel
local MainPanel = Instance.new("Frame")
MainPanel.Size = UDim2.new(0, 200, 0, 230) -- Increased height for new toggle
MainPanel.Position = UDim2.new(0.85, 0, 0.5, 0)
MainPanel.AnchorPoint = Vector2.new(1, 0.5)
MainPanel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MainPanel.BorderSizePixel = 0
MainPanel.Parent = ScreenGui

-- Add rounded corners to main panel
local MainPanelCorner = Instance.new("UICorner")
MainPanelCorner.CornerRadius = UDim.new(0.05, 0)
MainPanelCorner.Parent = MainPanel

-- Title
local TitleLabel = Instance.new("TextLabel")
TitleLabel.Size = UDim2.new(1, 0, 0, 30)
TitleLabel.Position = UDim2.new(0, 0, 0, 0)
TitleLabel.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
TitleLabel.BorderSizePixel = 0
TitleLabel.Text = "Silent Aim"
TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TitleLabel.Font = Enum.Font.SourceSansBold
TitleLabel.TextSize = 18
TitleLabel.Parent = MainPanel

-- Add rounded corners to title
local TitleCorner = Instance.new("UICorner")
TitleCorner.CornerRadius = UDim.new(0.05, 0)
TitleCorner.Parent = TitleLabel

-- Function to create toggle buttons
local function CreateToggle(parent, position, text, initialState, callback)
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Size = UDim2.new(1, -20, 0, 40)
    toggleFrame.Position = position
    toggleFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    toggleFrame.BorderSizePixel = 0
    toggleFrame.Parent = parent
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0.1, 0)
    toggleCorner.Parent = toggleFrame
    
    local toggleLabel = Instance.new("TextLabel")
    toggleLabel.Size = UDim2.new(0.7, 0, 1, 0)
    toggleLabel.Position = UDim2.new(0, 10, 0, 0)
    toggleLabel.BackgroundTransparency = 1
    toggleLabel.Text = text
    toggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleLabel.Font = Enum.Font.SourceSans
    toggleLabel.TextSize = 16
    toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    toggleLabel.Parent = toggleFrame
    
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 50, 0, 25)
    toggleButton.Position = UDim2.new(1, -60, 0.5, 0)
    toggleButton.AnchorPoint = Vector2.new(0, 0.5)
    toggleButton.BackgroundColor3 = initialState and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(170, 0, 0)
    toggleButton.Text = initialState and "ON" or "OFF"
    toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.Font = Enum.Font.SourceSansBold
    toggleButton.TextSize = 14
    toggleButton.Parent = toggleFrame
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0.2, 0)
    buttonCorner.Parent = toggleButton
    
    local state = initialState
    
    toggleButton.MouseButton1Click:Connect(function()
        state = not state
        toggleButton.Text = state and "ON" or "OFF"
        toggleButton.BackgroundColor3 = state and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(170, 0, 0)
        callback(state)
    end)
    
    return toggleButton
end

-- Create toggles
local silentAimToggle = CreateToggle(MainPanel, UDim2.new(0, 10, 0, 40), "Silent Aim", SilentAimEnabled, function(state)
    SilentAimEnabled = state
    if not SilentAimEnabled and CurrentHighlight then
        CurrentHighlight:Destroy()
        CurrentHighlight = nil
    end
end)

local teamCheckToggle = CreateToggle(MainPanel, UDim2.new(0, 10, 0, 90), "Team Check", TeamCheck, function(state)
    TeamCheck = state
    -- Force ESP update when team check changes
    UpdateESP()
end)

local highlightToggle = CreateToggle(MainPanel, UDim2.new(0, 10, 0, 140), "Highlight Target", HighlightEnabled, function(state)
    HighlightEnabled = state
    if not HighlightEnabled and CurrentHighlight then
        CurrentHighlight:Destroy()
        CurrentHighlight = nil
    end
end)

local espToggle = CreateToggle(MainPanel, UDim2.new(0, 10, 0, 190), "Player ESP", ESPEnabled, function(state)
    ESPEnabled = state
    -- Force ESP update immediately
    UpdateESP()
end)

-- Minimize button
local minimizeButton = Instance.new("TextButton")
minimizeButton.Size = UDim2.new(0, 30, 0, 30)
minimizeButton.Position = UDim2.new(1, -30, 0, 0)
minimizeButton.BackgroundTransparency = 1
minimizeButton.Text = "-"
minimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
minimizeButton.Font = Enum.Font.SourceSansBold
minimizeButton.TextSize = 24
minimizeButton.Parent = MainPanel

local minimized = false
minimizeButton.MouseButton1Click:Connect(function()
    minimized = not minimized
    if minimized then
        MainPanel.Size = UDim2.new(0, 200, 0, 30)
        minimizeButton.Text = "+"
    else
        MainPanel.Size = UDim2.new(0, 200, 0, 230) -- Updated height
        minimizeButton.Text = "-"
    end
end)

-- Make panel draggable
local dragging = false
local dragInput
local dragStart
local startPos

local function update(input)
    local delta = input.Position - dragStart
    MainPanel.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

TitleLabel.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MainPanel.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

TitleLabel.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Notification
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Silent Aim",
    Text = "Loaded successfully with mobile UI and ESP.",
    Duration = 3
})
